#! /bin/bash
# Just sets up the plugins and theme for a Virtuoso build
# This script does not do anything with the database or web server
#
#
# This script assumes that you already have WP-CLI installed
#
# Execute this script inside the directory you want a WordPress install in

# Pull any custom configurations
CONFIG() {
    val=$(grep -E "^$1=" ~/scripts/wp-init/wp-init.conf 2>/dev/null || echo "$1=__DEFAULT__" | head -n 1 | cut -d '=' -f 2-)

    if [[ $val == __DEFAULT__ ]]
    then
        case $1 in
            DOCUMENT_ROOT)
                echo -n "~/Sites/"
                ;;
            DROPBOX_PATH)
                echo -n "~/Dropbox/"
                ;;
            SSL)
                echo -n "false"
                ;;
            SERVER)
                echo -n "MAMP"
                ;;
        esac
    else
        echo -n $val | cut -d '=' -f 2-
    fi
}

USAGE() {
    echo -e "Usage: ${GREEN}$PROGRAM domainName.test mysite${NC}"
    echo -e "Parameter 1: Please supply the local ${GREEN}SITE URL${NC}"
    echo -e "Parameter 2: Please supply the local ${GREEN}SITE TITLE${NC}"
    echo "If you have not already, install the WP-CLI command line tool."
    echo "Then execute this script inside the directory you want WordPress installed in."
    exit 1
}

# Emit a message to stderr and exit.
die() {
    echo -e "$@" >&2
    exit 1
}

declare -r RED='\033[0;31m'
declare -r GREEN='\033[0;32m'
declare -r NC='\033[0m' # No Color
declare -r PROGRAM=${0##*/} #basename of program

if [[ $# -ne 2 ]]; then
    USAGE
fi

declare -r _site_url=$1
declare -r _site_title=$2

# Check for the WP-CLI and PHP
which php > /dev/null
if [[ $? -eq 1 ]]; then
    die "${RED}$PROGRAM ERROR:${NC}\nThe WP-CLI is not installed.\nPlease visit ${GREEN}https://wp-cli.org/${NC} for instructions on how to install."
fi

which wp > /dev/null
if [[ $? -eq 1 ]]; then
    die "${RED}$PROGRAM ERROR:${NC}\nPHP is not installed.\nPlease visit ${GREEN}http://php.net/manual/en/install.php${NC} for instructions on how to install."
fi

# What server are we using? Set the wp-content path
if [[ "$(CONFIG SERVER)" = 'FLYWHEEL' ]]; then
  declare -r _wp_root_path="$(CONFIG DOCUMENT_ROOT)"$_site_title/app/public
fi

if [[ "$(CONFIG SERVER)" = 'MAMP' ]]; then
  declare -r _wp_root_path="$(CONFIG DOCUMENT_ROOT)"$_site_title
  wp config set DB_HOST "127.0.0.1"
fi

install_plugins() {

  cd "$_wp_root_path"/wp-content/plugins

  cp -a "$(CONFIG DROPBOX_PATH)"/install-script/plugins/* .

  wp plugin install query-monitor ninja-forms imsanity wp-migrate-db

  unzip "$_wp_root_path"/wp-content/plugins/virtuoso-grandchild.zip
  rm "$_wp_root_path"/wp-content/plugins/virtuoso-grandchild.zip

  mv "$_wp_root_path"/wp-content/plugins/virtuoso-grandchild-master "$_wp_root_path"/wp-content/plugins/virtuoso-grandchild

  unzip "$_wp_root_path"/wp-content/plugins/advanced-custom-fields-pro.zip
  rm "$_wp_root_path"/wp-content/plugins/advanced-custom-fields-pro.zip

  cd "$_wp_root_path"/wp-content/plugins/virtuoso-grandchild

  # Grab the newest viruoso-grandchild
  git init

  git remote add updstream https://github.com/ErhardLabs/virtuoso-grandchild.git

  git fetch --all

  git reset --hard origin/master

  # update all plugins
  wp plugin update --all

  # activate all plugins
  wp plugin activate --all

  wp plugin install woocommerce woocommerce-services wp-gdpr-compliance wp-maintenance-mode woo-preview-emails genesis-connect-woocommerce wordfence wordpress-seo woocommerce-gateway-stripe autoptimize redirection autover
}

install_themes() {
  cd "$_wp_root_path"/wp-content/themes

  cp -a "$(CONFIG DROPBOX_PATH)"/install-script/themes/* .

  cd "$_wp_root_path"/wp-content/themes/virtuoso

  # Grab the newest Viruoso install so we can grab the newest files
  git init

  git remote add origin https://github.com/ErhardLabs/virtuoso.git

  git fetch --all

  git reset --hard origin/master

  # Need to install all Virtuoso dependencies
  npm install && composer install

  npm run dev

  wp theme update genesis

  wp theme activate virtuoso

  # Get rid of default themes
  wp theme delete twentynineteen twentyseventeen twentysixteen twentyfifteen
}

delete_default_posts() {
  # Delete all pages
  wp post delete $(wp post list --post_type='page' --format=ids)
  # Delete all Trashed pages
  wp post delete $(wp post list --post_status=trash --format=ids)
}

create_front_page() {
  wp post create --post_type=page --post_title='_Front Page' --post_status=publish
  wp option update show_on_front page
  wp option update page_on_front $(wp post list --pagename=_front-page --field=ID --path="$_wp_root_path" --url=$_site_url)
}

create_menus() {
  wp menu create "Primary Naviagtion"
  wp menu location assign primary-naviagtion primary
  wp menu create "Secondary Naviagtion"
  wp menu location assign secondary-naviagtion secondary
}

update_permalinks() {
  wp rewrite structure '/%postname%'
}

MAIN() {
  install_plugins
  install_themes
  delete_default_posts
  create_front_page
  create_menus
  update_permalinks
}

MAIN
die "${GREEN}$PROGRAM FINISHED!${NC}\n${_site_url} is now running"

exit 1
